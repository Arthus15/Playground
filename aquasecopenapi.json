{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "name": "Aqua Security Software Ltd.",
      "url": "https://www.aquasec.com/about-us/contact-us/"
    },
    "title": "Aqua Wave API",
    "description": "Note: This API is currently in preview and is subject to change. The Aqua Wave API is a REST API that enables automated interaction with the Image Scanning service. The following Swagger API definitions will help you craft your API requests. Please note that to access this API, you will need to use a Bearer token. To generate a token please use the /auth API endpoint and authenticate using user name and password. The token is valid for one hour. In an upcoming release, additional authentication options that are based on the Wave API key and secret will be added.",
    "version": "0.8.0"
  },
  "paths": {
    "/build/detections": {
      "get": {
        "description": "Get a list of issues which were detected in the latest scans of all repositories\n",
        "operationId": "get-detections",
        "parameters": [
          {
            "description": "Set to true to indicate that all results should be exported, not just a single page.",
            "in": "query",
            "name": "export_all",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The AVD identifier.",
            "in": "query",
            "name": "avd_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter results where repository contains the input",
            "in": "query",
            "name": "repository_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter results by title",
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only return results where the result type matches.",
            "in": "query",
            "name": "result_type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ResultType"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories that have security issues of the\nprovided severity. Multiple severities can be provided\nby repeating the parameter.\n",
            "explode": true,
            "in": "query",
            "name": "severity",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SecurityIssueSeverity"
              },
              "type": "array"
            }
          },
          {
            "description": "Format of the response, defaults to json, csv is also allowed.",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Result to start with.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "allowEmptyValue": true,
            "description": "Size of results.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 50,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDetectionsResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Detections successfully loaded and returned.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a list of issues which were detected in the latest scans of all repositories",
        "tags": [
          "build-security"
        ]
      },
      "summary": "Detected issues on latest scans of all repositories"
    },
    "/build/detections/{avd_id}/instances": {
      "get": {
        "description": "Get a list of instances of a given AVD ID detection\n",
        "operationId": "get-detection-instances",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDetectionInstancesResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Detection instances successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such detection.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a list of instances of a given AVD ID detection",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The AVD identifier.",
          "in": "path",
          "name": "avd_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where filename contains the input",
          "in": "query",
          "name": "filename",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where repository contains the input",
          "in": "query",
          "name": "repository_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Only return results where the result type matches.",
          "in": "query",
          "name": "result_type",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ResultType"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return repositories that have security issues of the\nprovided severity. Multiple severities can be provided\nby repeating the parameter.\n",
          "explode": true,
          "in": "query",
          "name": "severity",
          "required": false,
          "schema": {
            "items": {
              "$ref": "#/components/schemas/SecurityIssueSeverity"
            },
            "type": "array"
          }
        },
        {
          "description": "Order by what parameter.",
          "in": "query",
          "name": "order_by",
          "required": false,
          "schema": {
            "default": [
              "-severity"
            ],
            "items": {
              "$ref": "#/components/schemas/DetectionInstancesOrderBy"
            },
            "type": "array"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 20,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        }
      ]
    },
    "/build/oss-health": {
      "get": {
        "description": "Get a list of dependencies (name and version) with metadata about the repository amount, and dependency scan.\n",
        "operationId": "list-oss-health",
        "parameters": [
          {
            "description": "Filter oss-health by name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter oss-health by type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "description": "The dependency types",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Format of the response, defaults to json, csv is also allowed.",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "description": "Filter oss-health by repository amount larger then",
            "in": "query",
            "name": "repo_amount",
            "required": false,
            "schema": {
              "default": 0,
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Result to start with.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "allowEmptyValue": true,
            "description": "Size of results.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 50,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "description": "Sort by what parameter",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": [
                "repository_amount"
              ],
              "items": {
                "$ref": "#/components/schemas/OssHealthOrderBy"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOssHealthResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Dependencies successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such repository.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get oss health",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/oss-health/dependency-repositories": {
      "get": {
        "description": "Get a list of repositories using the pecific package.\n",
        "operationId": "list-dependency-repositories",
        "parameters": [
          {
            "description": "get the repositories for package with this id",
            "in": "query",
            "name": "package_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "get the repositories for package from this source",
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "get all repositories for package from this platform",
            "in": "query",
            "name": "platform",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "get all repositories for package contains this string",
            "in": "query",
            "name": "repository_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDependencyRepositoriesResponse"
                }
              }
            },
            "description": "Repositories successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such package.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get repositories using the  package",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/oss-health/versions": {
      "get": {
        "description": "Get a list of versions for specific package.\n",
        "operationId": "list-versions",
        "parameters": [
          {
            "description": "get all package's versions",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "get all versions for package from this source",
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVersionsResponse"
                }
              }
            },
            "description": "Versions successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such package.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get versions for package",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies": {
      "get": {
        "description": "Returns a list of policies.\n",
        "operationId": "get-build-security-policies",
        "parameters": [
          {
            "description": "Specify a list of repository IDs to export. Overrides single page exports and the 'export_all' parameter.",
            "in": "query",
            "name": "policy_ids",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Set to true to indicate that all results should be exported, not just a single page.",
            "in": "query",
            "name": "export_all",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the response, defaults to json, csv is also allowed.",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "description": "Search string to search name, description, createdBy and updatedBy",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by check",
            "in": "query",
            "name": "check",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by repository. \n'all_repositories' will return all suppressions that are not associated with a specific repository\n",
            "in": "query",
            "name": "repository",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by branch",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by type, policy or suppression.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PolicyTypeEnum",
              "default": "policy"
            }
          },
          {
            "description": "Filter by status, enabled or disabled",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StatusEnum",
              "default": "enabled"
            }
          },
          {
            "description": "Filter by scope, repository, pipeline, all",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ScopeEnum",
              "default": "repository"
            }
          },
          {
            "description": "Order by what parameter.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": [
                "name"
              ],
              "items": {
                "$ref": "#/components/schemas/ListBuildSecurityPoliciesOrderBy"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Result to start with.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "allowEmptyValue": true,
            "description": "Size of results.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBuildSecurityPoliciesResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Policies successfully loaded and returned.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a list of build security policies",
        "tags": [
          "build-security"
        ]
      },
      "post": {
        "operationId": "create-build-security-policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBuildSecurityPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBuildSecurityPolicyResponse"
                }
              }
            },
            "description": "Policy successfully created. Follow the `Location` header redirect for information about the new Policy.\n"
          }
        },
        "summary": "Create a new policy",
        "tags": [
          "build-security"
        ]
      },
      "summary": "Manage build security assurance policies"
    },
    "/build/policies/{policy_id}": {
      "delete": {
        "operationId": "delete-build-security-policy",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Delete a policy",
        "tags": [
          "build-security"
        ]
      },
      "get": {
        "operationId": "get-build-security-policy",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBuildSecurityPolicyResponse"
                }
              }
            },
            "description": "Policy found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get a single policy",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "policy_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "put-build-security-policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBuildSecurityPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy successfully created. Follow the `Location` header redirect for information about the new Policy.\n"
          }
        },
        "summary": "Modify an existing policy by overwriting it",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies/import": {
      "post": {
        "operationId": "import-build-security-policies",
        "parameters": [
          {
            "description": "Set to true to replace existing policies where possible (where IDs match).",
            "in": "query",
            "name": "replace",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListBuildSecurityPoliciesExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Policies successfully imported."
          }
        },
        "summary": "Import one or more build security policies from a previously exported file.",
        "tags": [
          "build-security"
        ]
      },
      "summary": "Manage build security assurance policies"
    },
    "/build/policies/masterdata/checkdetails": {
      "get": {
        "operationId": "get-all-policy-check-details",
        "parameters": [
          {
            "description": "Filter by scan type",
            "in": "query",
            "name": "scan_type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ScanType"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllChecksDetailResponse"
                }
              }
            },
            "description": "Full dataset of checks."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the checks details",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies/masterdata/providerdetails": {
      "get": {
        "operationId": "get-all-policy-provider-details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllProviderDetailResponse"
                }
              }
            },
            "description": "Full dataset of providers, services and checks."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the provider names",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies/masterdata/providers": {
      "get": {
        "operationId": "get-policy-provider-names",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyProviderNamesResponse"
                }
              }
            },
            "description": "Provider names."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the provider names",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies/masterdata/providers/{provider_name}": {
      "get": {
        "operationId": "get-policy-provider-service-names",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyServiceNamesResponse"
                }
              }
            },
            "description": "Provider service names."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the provider names",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "provider_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/build/policies/masterdata/providers/{provider_name}/{service_name}": {
      "get": {
        "operationId": "get-policy-provider-service-checks",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyServiceChecksResponse"
                }
              }
            },
            "description": "Check names for provider and service combination."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the checks for a provider and service",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "provider_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "service_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/build/policies/masterdata/sast": {
      "get": {
        "operationId": "get-all-sast-check-details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SastChecksMetadataResponse"
                }
              }
            },
            "description": "Full dataset of sast checks."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the sast checks details",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies/masterdata/secrets": {
      "get": {
        "operationId": "get-all-secrets-check-details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretsChecksMetadataResponse"
                }
              }
            },
            "description": "Full dataset of secrets checks."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the secrets checks details",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/policies/masterdata/tracee": {
      "get": {
        "operationId": "get-all-tracee-check-details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceeChecksMetadataResponse"
                }
              }
            },
            "description": "Full dataset of tracee checks."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "summary": "Get the tracee checks details",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/repositories": {
      "get": {
        "description": "Returns a list of repositories.\n",
        "operationId": "get-repositories",
        "parameters": [
          {
            "description": "Specify a list of repository IDs to export. Only applicable when the format parameter is set to 'csv'. Overrides single page exports and the 'export_all' parameter.",
            "in": "query",
            "name": "repository_ids",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Set to true to indicate that all results should be exported, not just a single page.",
            "in": "query",
            "name": "export_all",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the response, defaults to json, csv is also allowed.",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "description": "Order by what parameter.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": [
                "scan_date"
              ],
              "items": {
                "$ref": "#/components/schemas/ListRepositoriesOrderBy"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Result to start with.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "allowEmptyValue": true,
            "description": "Size of results.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "disable_repository_paging",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories that have security issues of the\nprovided severity. Multiple severities can be provided\nby repeating the parameter.\n",
            "explode": true,
            "in": "query",
            "name": "severity",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SecurityIssueSeverity"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with the provide policy status.",
            "explode": true,
            "in": "query",
            "name": "policy_status",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SecurityIssuePolicyStatus"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with the provide policy status.",
            "in": "query",
            "name": "severity_type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SeverityTypes"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with a scan date after the given date.\nFormat of time should be RFC3339 [1979-10-30T03:25:00.000Z]\n",
            "in": "query",
            "name": "scan_date_after",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with a last_push that is after the last scan_date \nand the last scan_date is before the input\n",
            "in": "query",
            "name": "threshold",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with a name containing this input.",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with a last_push after the given date.\nFormat of time should be RFC3339 [1979-10-30T03:25:00.000Z]\n",
            "in": "query",
            "name": "last_push_after",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories is_private is equal to this input.",
            "in": "query",
            "name": "is_private",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories is_offline is equal to this input.",
            "in": "query",
            "name": "is_offline",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return repositories which have no scans",
            "in": "query",
            "name": "no_scan_repositories",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repository with a name containing this input.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with a name containing this input.",
            "in": "query",
            "name": "repositories",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with the md5(scm_id) equal to this input.\nPlease note, you need to run md5 on the scm_id you are searching for, BEFORE the request.\nMultiple scm_id can be provided by repeating the parameter.\n",
            "explode": true,
            "in": "query",
            "name": "scm_id",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories with these labels.",
            "explode": true,
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories for this build system.",
            "in": "query",
            "name": "system",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories for this build systems.",
            "in": "query",
            "name": "systems",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return repositories that have a specific triggered_by\ne.g. pr, push, offline or unknown\nMultiple triggered_by can be provided\nby repeating the parameter.\n",
            "explode": true,
            "in": "query",
            "name": "triggered_by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TriggeredByEnum"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRepositoriesResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Repositories successfully loaded and returned.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a list of repositories",
        "tags": [
          "build-security"
        ]
      },
      "summary": "Manage scanned code repositories"
    },
    "/build/repositories/{repo_id}": {
      "delete": {
        "description": "Delete a repository",
        "operationId": "delete-repository",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Delete a repository",
        "tags": [
          "build-security"
        ]
      },
      "get": {
        "description": "Get a repository along with metadata about the latest related scan.\n",
        "operationId": "get-repository",
        "parameters": [
          {
            "description": "The branch to return the repository object for",
            "in": "query",
            "name": "scan_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The scm_id to return the repository object for",
            "in": "query",
            "name": "scm_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRepositoryResponse"
                }
              }
            },
            "description": "Repository successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such repository.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a repository by ID",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "The repository identifier.",
          "in": "path",
          "name": "repo_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update-repository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepository"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Default branch successfully set.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such repository.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Modify the repository (default branch, is private or last push",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/repositories/{repo_id}/branches": {
      "get": {
        "description": "Get a list of branches with metadata about the latest related scan.\n",
        "operationId": "get-branches",
        "parameters": [
          {
            "description": "The repository identifier.",
            "in": "path",
            "name": "repo_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter results by branch name",
            "in": "query",
            "name": "branch_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter results by file name",
            "in": "query",
            "name": "file",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return branches with a scan date after the given date.\nFormat of time should be RFC3339 [1979-10-30T03:25:00.000Z]\n",
            "in": "query",
            "name": "branch_date_after",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return branches with the provide policy status.",
            "in": "query",
            "name": "policy_status",
            "required": false,
            "schema": {
              "explode": true,
              "items": {
                "$ref": "#/components/schemas/SecurityIssuePolicyStatus"
              },
              "style": "form",
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Filter by AVD ID.",
            "explode": true,
            "in": "query",
            "name": "avd_id",
            "required": false,
            "schema": {
              "example": "AVD0001",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Only return branches that have a specific type of results\ne.g. cloudformation or terraform\nMultiple scan types can be provided\nby repeating the parameter.\n",
            "explode": true,
            "in": "query",
            "name": "result_type",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ResultType"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Only return results that have security issues of the provided severity.\n",
            "in": "query",
            "name": "severity",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SecurityIssueSeverity"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Order by what parameter.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": [
                "scan_date"
              ],
              "items": {
                "$ref": "#/components/schemas/ListBranchesOrderBy"
              },
              "type": "array"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Result to start with.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            },
            "x-nullable": true
          },
          {
            "allowEmptyValue": true,
            "description": "Size of results.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBranchesResponse"
                }
              }
            },
            "description": "Branches successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such repository.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get branches by repository id",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/repositories/{repo_id}/branches/{branch_name}": {
      "delete": {
        "description": "Delete a branch",
        "operationId": "delete-branch",
        "responses": {
          "202": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Delete a pinned branch and the results",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "The repository identifier.",
          "in": "path",
          "name": "repo_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The branch name.",
          "in": "path",
          "name": "branch_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/build/repositories/{repo_id}/branches/pinned_branches/{branch_name}": {
      "delete": {
        "description": "Delete a pinned branch",
        "operationId": "delete-pinned-branch",
        "responses": {
          "202": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Delete a pinned branch",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "The repository identifier.",
          "in": "path",
          "name": "repo_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The branch name.",
          "in": "path",
          "name": "branch_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update-pinned-branch",
        "responses": {
          "202": {
            "description": "Pinned branch successfully set.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Add a pinned branch to the repository",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/repositories/{repo_id}/dependencies": {
      "get": {
        "description": "Get a list of dependencies with metadata about the latest related scan.\n",
        "operationId": "get-dependencies",
        "parameters": [
          {
            "description": "The repository identifier.",
            "in": "path",
            "name": "repo_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter dependencies by target",
            "in": "query",
            "name": "target",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter dependencies by type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Export dependencies in CycloneDX format",
            "in": "query",
            "name": "export",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDependenciesResponse"
                }
              }
            },
            "description": "Dependencies successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such repository.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get dependencies by repository id",
        "tags": [
          "build-security"
        ]
      }
    },
    "/build/repositories/{repo_id}/scans": {
      "get": {
        "description": "Get a list of scans for the given repository.\n",
        "operationId": "get-scans",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRepositoryScansResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Scans successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such repository.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a list of scans for a given repository",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The repository identifier.",
          "in": "path",
          "name": "repo_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 50,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "description": "Sort by what parameter",
          "in": "query",
          "name": "order_by",
          "required": false,
          "schema": {
            "default": [
              "scan_id"
            ],
            "items": {
              "$ref": "#/components/schemas/ScanDataOrderBy"
            },
            "type": "array"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Filter by AVD ID.",
          "in": "query",
          "name": "avd_id",
          "required": false,
          "schema": {
            "example": "AVD0001",
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Filter by target file.",
          "in": "query",
          "name": "target_file",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "summary": "Scans for a particular repository."
    },
    "/build/results/{result_id}": {
      "delete": {
        "description": "Delete a result",
        "operationId": "delete-result",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Delete a result",
        "tags": [
          "build-security"
        ]
      },
      "get": {
        "description": "Returns a single result\n",
        "operationId": "get-result",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResultResponse"
                }
              }
            },
            "description": "Result successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such result.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get a specific result",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "ID of the desired result",
          "in": "path",
          "name": "result_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "summary": "An individual result within a scan"
    },
    "/build/scans/{scan_id}": {
      "delete": {
        "description": "Delete a scan",
        "operationId": "delete-scan",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "Operation failed due to an unexpected error.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Delete a scan",
        "tags": [
          "build-security"
        ]
      },
      "get": {
        "description": "Returns scan information alongside data about the containing repository.\n",
        "operationId": "get-scan",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRepositoryScanResponse"
                }
              }
            },
            "description": "Scan successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such scan.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "Get information about a particular scan",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "The results for specific scan",
          "in": "path",
          "name": "scan_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "summary": "An individual scan"
    },
    "/build/scans/{scan_id}/files": {
      "get": {
        "description": "Returns a list of files with results for each\n",
        "operationId": "get-files",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFilesResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Files with results for this scan returned successfully.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such scan.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "List files which have results for a given scan",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Filter results where filename contains the input",
          "in": "query",
          "name": "filename",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where check name contains the input",
          "in": "query",
          "name": "check_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where avd_id contains the input",
          "in": "query",
          "name": "avd_id",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have a specific type\ne.g. cloudformation or terraform\nMultiple scan types can be provided\nby repeating the parameter.\n",
          "explode": true,
          "in": "query",
          "name": "result_type",
          "required": false,
          "schema": {
            "items": {
              "$ref": "#/components/schemas/ResultType"
            },
            "type": "array"
          },
          "style": "form"
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results with the provide policy status.",
          "in": "query",
          "name": "policy_status",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssuePolicyStatus"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have security issues of the provided severity.\n",
          "in": "query",
          "name": "severity",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The results for specific scan",
          "in": "path",
          "name": "scan_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 50,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        }
      ],
      "summary": "Files with their respective results for a given scan"
    },
    "/build/scans/{scan_id}/files/{file_id}/results": {
      "get": {
        "description": "Returns a list of files with results for each\n",
        "operationId": "get-file-results",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFileResultsResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Results for file returned successfully.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such scan.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "List results for a given file within a given scan",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Filter results where check name contains the input",
          "in": "query",
          "name": "check_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where avd_id contains the input",
          "in": "query",
          "name": "avd_id",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have security issues of the provided severity.\n",
          "in": "query",
          "name": "severity",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results with the provide policy status.",
          "in": "query",
          "name": "policy_status",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssuePolicyStatus"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The scan ID for which to return results",
          "in": "path",
          "name": "scan_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The file ID for which to return results",
          "in": "path",
          "name": "file_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Order by what parameter.",
          "in": "query",
          "name": "order_by",
          "required": false,
          "schema": {
            "default": [
              "-severity"
            ],
            "items": {
              "$ref": "#/components/schemas/ResultDataOrderBy"
            },
            "type": "array"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 50,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        }
      ],
      "summary": "Results for an individual file within a scan."
    },
    "/build/scans/{scan_id}/group/{column}": {
      "get": {
        "description": "Returns a list of groups with results for each\n",
        "operationId": "get-groups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupsResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Groups with results for this scan returned successfully.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such scan.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "List groups which have results for a given scan",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Filter results where filename contains the input",
          "in": "query",
          "name": "filename",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where check name contains the input",
          "in": "query",
          "name": "check_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where avd_id contains the input",
          "in": "query",
          "name": "avd_id",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have a specific type\ne.g. cloudformation or terraform\nMultiple scan types can be provided\nby repeating the parameter.\n",
          "explode": true,
          "in": "query",
          "name": "result_type",
          "required": false,
          "schema": {
            "items": {
              "$ref": "#/components/schemas/ResultType"
            },
            "type": "array"
          },
          "style": "form"
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results with the provide policy status.",
          "in": "query",
          "name": "policy_status",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssuePolicyStatus"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have security issues of the provided severity.\n",
          "in": "query",
          "name": "severity",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The results for specific scan",
          "in": "path",
          "name": "scan_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The specific column to group by",
          "in": "path",
          "name": "column",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GroupColumnEnum"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 50,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        }
      ],
      "summary": "Groups with their respective results for a given scan"
    },
    "/build/scans/{scan_id}/group/{column}/{column_id}/results": {
      "get": {
        "description": "Returns a list of groups with results for each\n",
        "operationId": "get-group-results",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupResultsResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Results for group returned successfully.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such scan.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "List results, by the dedicated group",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Filter results where check name contains the input",
          "in": "query",
          "name": "check_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where avd_id contains the input",
          "in": "query",
          "name": "avd_id",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have security issues of the provided severity.\n",
          "in": "query",
          "name": "severity",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results with the provide policy status.",
          "in": "query",
          "name": "policy_status",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/SecurityIssuePolicyStatus"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The scan ID for which to return results",
          "in": "path",
          "name": "scan_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The column for which to return results",
          "in": "path",
          "name": "column",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GroupColumnEnum"
          }
        },
        {
          "description": "The column ID for which to return results",
          "in": "path",
          "name": "column_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have a specific type of result  \ne.g. cloudformation, terraform, secrets or vulnerability\nMultiple result types can be provided\nby repeating the parameter.\n",
          "explode": true,
          "in": "query",
          "name": "result_type",
          "required": false,
          "schema": {
            "items": {
              "$ref": "#/components/schemas/ResultType"
            },
            "type": "array"
          },
          "style": "form"
        },
        {
          "description": "Order by what parameter.",
          "in": "query",
          "name": "order_by",
          "required": false,
          "schema": {
            "default": [
              "-severity"
            ],
            "items": {
              "$ref": "#/components/schemas/ResultDataOrderBy"
            },
            "type": "array"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 50,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "description": "Filter results by file (ex. resource view limited to one file)",
          "in": "query",
          "name": "target_file_id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "summary": "Results for an individual group within a scan."
    },
    "/build/scans/{scan_id}/results": {
      "get": {
        "description": "Returns metadata and vulnerability scan result summary for a scan\n",
        "operationId": "get-results",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResultsResponse"
                }
              },
              "text/csv": {}
            },
            "description": "Scan successfully loaded and returned.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "No such scan, or scan wasn't scanned by Atlas.\n"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            },
            "description": "An unexpected error has occurred.\n"
          }
        },
        "security": [
          {
            "userToken": [
              "admin"
            ]
          }
        ],
        "summary": "List results for a given scan",
        "tags": [
          "build-security"
        ]
      },
      "parameters": [
        {
          "description": "Set to true to indicate that all results should be exported, not just a single page.",
          "in": "query",
          "name": "export_all",
          "required": false,
          "schema": {
            "default": false,
            "type": "boolean"
          }
        },
        {
          "description": "Format of the response, defaults to json, csv is also allowed.",
          "in": "query",
          "name": "format",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/ExportFormat"
          }
        },
        {
          "description": "The results for specific scan",
          "in": "path",
          "name": "scan_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Order by what parameter.",
          "in": "query",
          "name": "order_by",
          "required": false,
          "schema": {
            "default": [
              "-severity"
            ],
            "items": {
              "$ref": "#/components/schemas/ResultDataOrderBy"
            },
            "type": "array"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Result to start with.",
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "default": 1,
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Size of results.",
          "in": "query",
          "name": "page_size",
          "required": false,
          "schema": {
            "default": 50,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "x-nullable": true
        },
        {
          "allowEmptyValue": true,
          "description": "Filter by AVD ID.",
          "in": "query",
          "name": "avd_id",
          "required": false,
          "schema": {
            "example": "AVD0001",
            "type": "string"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results from specific tags\n",
          "examples": {
            "tag-key": {
              "summary": "filter based only on key name",
              "value": "somekey"
            },
            "tagkeyandvalue": {
              "summary": "filter based on key and value",
              "value": "somekey:somevalue"
            }
          },
          "in": "query",
          "name": "tags",
          "required": false,
          "schema": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have security issues of the\nprovided severity. Multiple severities can be provided\nby repeating the parameter.\n",
          "explode": true,
          "in": "query",
          "name": "severity",
          "required": false,
          "schema": {
            "items": {
              "$ref": "#/components/schemas/SecurityIssueSeverity"
            },
            "type": "array"
          },
          "style": "form"
        },
        {
          "allowEmptyValue": true,
          "description": "Only return results that have a specific type\ne.g. cloudformation or terraform\nMultiple scan types can be provided\nby repeating the parameter.\n",
          "explode": true,
          "in": "query",
          "name": "result_type",
          "required": false,
          "schema": {
            "items": {
              "$ref": "#/components/schemas/ResultType"
            },
            "type": "array"
          },
          "style": "form"
        },
        {
          "description": "Filter results where filename contains the input",
          "in": "query",
          "name": "filename",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Filter results where check name contains the input",
          "in": "query",
          "name": "check_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "summary": "Results for a given scan"
    },
    "/build/tf-runtask/tokens": {
      "post": {
        "operationId": "generate-tf-aqua-tokens",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTFAquaTokensResponse"
                }
              }
            },
            "description": "Tokens successfully created."
          }
        },
        "summary": "Generate tokens for tf cloud users.",
        "tags": [
          "build-security"
        ]
      },
      "summary": "Manage build security assurance policies"
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "description": "This is the format in which all errors from the API are returned,\nfor any response whose status is larger than or equal to 400.\n",
        "properties": {
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "status_code": {
            "description": "A standard HTTP status code",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "status_code",
          "message"
        ],
        "type": "object",
        "x-go-error": "Error {status_code}: {message}"
      },
      "AVDIDList": {
        "properties": {
          "avd_ids": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "avd_ids"
        ],
        "type": "object"
      },
      "Branches": {
        "properties": {
          "branch_name": {
            "description": "A branch name",
            "type": "string"
          },
          "default_branch": {
            "description": "A bool if default",
            "type": "boolean"
          },
          "pinned_branch": {
            "description": "A bool if pinned",
            "type": "boolean"
          },
          "repository_name": {
            "description": "the repository name",
            "type": "string"
          },
          "scan_details": {
            "$ref": "#/components/schemas/ScanDetail"
          },
          "scm_id": {
            "description": "The Repository's scm id",
            "type": "string"
          }
        },
        "required": [
          "branch_name",
          "default_branch",
          "pinned_branch"
        ],
        "type": "object"
      },
      "BuildSecurityPolicy": {
        "properties": {
          "clear_schedule": {
            "default": false,
            "type": "boolean"
          },
          "controls": {
            "items": {
              "$ref": "#/components/schemas/BuildSecurityPolicyControl"
            },
            "type": "array"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "enforce": {
            "type": "boolean"
          },
          "enforcement_schedule": {
            "format": "date",
            "type": "string"
          },
          "fail_build": {
            "type": "boolean"
          },
          "fail_pr": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "policy_id": {
            "format": "uuid",
            "type": "string"
          },
          "policy_type": {
            "$ref": "#/components/schemas/PolicyTypeEnum"
          },
          "scope": {
            "$ref": "#/components/schemas/BuildSecurityPolicyScope"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        },
        "required": [
          "policy_id",
          "name",
          "description",
          "enable",
          "created",
          "updated",
          "created_by",
          "updated_by",
          "enforce",
          "fail_build",
          "fail_pr",
          "controls",
          "scope",
          "policy_type"
        ],
        "type": "object"
      },
      "BuildSecurityPolicyControl": {
        "properties": {
          "avd_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "checks": {
            "items": {
              "$ref": "#/components/schemas/Check"
            },
            "type": "array"
          },
          "cve_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dependency_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file_changes": {
            "$ref": "#/components/schemas/FileChanges"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "provider": {
            "type": "string"
          },
          "scan_type": {
            "$ref": "#/components/schemas/ScanType"
          },
          "service": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          },
          "type": {
            "$ref": "#/components/schemas/BuildSecurityPolicyControlType"
          },
          "vendorFix": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "scan_type"
        ],
        "type": "object"
      },
      "BuildSecurityPolicyControlType": {
        "enum": [
          "vulnerabilitySeverity",
          "cveByIds",
          "vulnerabilityWithVendorFix",
          "misconfigurations",
          "misconfigurationsBySeverity",
          "misconfigurationsByService",
          "secretSeverity",
          "secretByPatterns",
          "secretByIds",
          "sastSeverity",
          "sastByIds",
          "pipelineMisconfigurations",
          "pipelineMisconfigurationsBySeverity",
          "dependencyByName",
          "manifestSecurityScanChecks",
          "manifestSourceCodeProtection",
          "imageName",
          "detectionIds",
          "detectionsBySeverity",
          "fsPath",
          "networkUrl",
          "portRange"
        ],
        "type": "string"
      },
      "BuildSecurityPolicyScope": {
        "properties": {
          "expression": {
            "type": "string"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/BuildSecurityScopeVariable"
            },
            "type": "array"
          }
        },
        "required": [
          "expression",
          "variables"
        ],
        "type": "object"
      },
      "BuildSecurityScopeVariable": {
        "properties": {
          "attribute": {
            "$ref": "#/components/schemas/BuildSecurityScopeVariableAttribute"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "attribute",
          "value"
        ],
        "type": "object"
      },
      "BuildSecurityScopeVariableAttribute": {
        "enum": [
          "repository.id",
          "repository.name",
          "repository.branch",
          "repository.topic",
          "repository.organization",
          "repository.provider"
        ],
        "type": "string"
      },
      "Check": {
        "properties": {
          "check_id": {
            "description": "The check id",
            "type": "string"
          },
          "check_name": {
            "description": "The check name",
            "type": "string"
          },
          "provider_name": {
            "description": "The Provider name",
            "type": "string"
          },
          "scan_type": {
            "$ref": "#/components/schemas/ScanType",
            "description": "The scan type"
          },
          "service_name": {
            "description": "The Service name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateBuildSecurityPolicyResponse": {
        "properties": {
          "policy_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "policy_id"
        ],
        "type": "object"
      },
      "CreateTFAquaTokensResponse": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "hmac_secret": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Dependency": {
        "properties": {
          "child_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "critical_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "high_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "A dependency id",
            "type": "string"
          },
          "low_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "medium_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "parent_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_id": {
            "description": "The scan ID that the dependency came from",
            "type": "string"
          },
          "target": {
            "description": "A dependency target",
            "type": "string"
          },
          "type": {
            "description": "A dependency type",
            "type": "string"
          },
          "unknown_severity_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DependencyRepository": {
        "properties": {
          "id": {
            "description": "Repository ID",
            "type": "string"
          },
          "name": {
            "description": "Repository name",
            "type": "string"
          },
          "platform": {
            "description": "Repository platform",
            "type": "string"
          },
          "scm_id": {
            "description": "Repository link",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Detection": {
        "properties": {
          "avd_id": {
            "type": "string"
          },
          "detection_count": {
            "format": "int32",
            "type": "integer"
          },
          "highest_severity": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "avd_id",
          "title",
          "detection_count",
          "highest_severity"
        ],
        "type": "object"
      },
      "DetectionInstance": {
        "properties": {
          "highest_severity": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          },
          "impacted_files": {
            "format": "int32",
            "type": "integer"
          },
          "repository_id": {
            "format": "uuid",
            "type": "string"
          },
          "repository_name": {
            "type": "string"
          },
          "scan_date": {
            "format": "date-time",
            "type": "string"
          },
          "scan_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "repository_id",
          "scan_id",
          "repository_name",
          "highest_severity",
          "impacted_files",
          "scan_date"
        ],
        "type": "object"
      },
      "DetectionInstancesOrderBy": {
        "enum": [
          "repository_name",
          "-repository_name",
          "impacted_file_count",
          "-impacted_file_count",
          "highest_severity",
          "-highest_severity",
          "scan_date",
          "-scan_date"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-highest_severity": {
              "description": "Sort by highest severity in ascending order",
              "go_name": "InstancesOrderByHighestSeverityAsc"
            },
            "-impacted_file_count": {
              "description": "Sort by impacted file count in ascending order",
              "go_name": "InstancesOrderByImpactedFileCountAsc"
            },
            "-repository_name": {
              "description": "Sort by repository name in ascending order",
              "go_name": "InstancesOrderByRepositoryNameAsc"
            },
            "-scan_date": {
              "description": "Sort by date in ascending order",
              "go_name": "InstancesOrderByScanDateAsc"
            },
            "highest_severity": {
              "description": "Sort by highest severity in descending order",
              "go_name": "InstancesOrderByHighestSeverityDesc"
            },
            "impacted_file_count": {
              "description": "Sort by impacted file count in descending order",
              "go_name": "InstancesOrderByImpactedFileCountDesc"
            },
            "repository_name": {
              "description": "Sort by repository name in descending order",
              "go_name": "InstancesOrderByRepositoryNameDesc"
            },
            "scan_date": {
              "description": "Sort by date in descending order",
              "go_name": "InstancesOrderByScanDateDesc"
            }
          }
        }
      },
      "DocumentDate": {
        "properties": {
          "date": {
            "description": "Full UTC date the action was performed on, in ISO8601\nformat (i.e. YYYY-MM-DDTHH:MM:SS).\n",
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "description": "The unique ID of the user who performed the operation.\n",
            "type": "string"
          }
        },
        "required": [
          "date",
          "user_id"
        ],
        "type": "object"
      },
      "ExportFormat": {
        "default": "json",
        "enum": [
          "json",
          "csv",
          "export"
        ],
        "type": "string"
      },
      "File": {
        "properties": {
          "critical_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "filename": {
            "type": "string"
          },
          "high_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "low_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "medium_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "result_type": {
            "$ref": "#/components/schemas/ResultType"
          },
          "unknown_severity_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "filename",
          "result_type"
        ],
        "type": "object"
      },
      "FileChanges": {
        "properties": {
          "changes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetAllChecksDetailResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Check"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetAllProviderDetailResponse": {
        "properties": {
          "data": {
            "properties": {
              "properties": {
                "type": "object"
              },
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GetBranchesResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Branches"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_branches": {
            "description": "The total number of branches",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_critical": {
            "description": "The total number of branches which have one or more critical results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_high": {
            "description": "The total number of branches which have one or more high results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_low": {
            "description": "The total number of branches which have one or more low results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_medium": {
            "description": "The total number of branches which have one or more medium results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_unknown": {
            "description": "The total number of branches which have one or more unknown results",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetBuildSecurityPolicyResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BuildSecurityPolicy"
          }
        },
        "type": "object"
      },
      "GetDependenciesResponse": {
        "properties": {
          "cyclonedx": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Dependency"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetFileResultsResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Result"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetFilesResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetGroupResultsResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Result"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetGroupsResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetPolicyProviderNamesResponse": {
        "properties": {
          "data": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetPolicyServiceChecksResponse": {
        "properties": {
          "data": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetPolicyServiceNamesResponse": {
        "properties": {
          "data": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetRepositoryResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Repository"
          }
        },
        "type": "object"
      },
      "GetRepositoryScanResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Scan"
          }
        },
        "type": "object"
      },
      "GetResultResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Result"
          }
        },
        "type": "object"
      },
      "GetResultsResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Result"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetScansResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ScanDetails"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Group": {
        "properties": {
          "critical_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "high_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "low_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "medium_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "result_type": {
            "$ref": "#/components/schemas/ResultType"
          },
          "unknown_severity_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "result_type"
        ],
        "type": "object"
      },
      "GroupColumnEnum": {
        "enum": [
          "target_file",
          "avd_id",
          "resource"
        ],
        "type": "string"
      },
      "ListBranchesOrderBy": {
        "enum": [
          "scan_date",
          "-scan_date",
          "impacted_file_count",
          "-impacted_file_count",
          "policy_status",
          "-policy_status",
          "severity",
          "-severity",
          "branch",
          "-branch"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-branch": {
              "description": "Sort by branch name in descending order",
              "go_name": "BranchNameDesc"
            },
            "-impacted_file_count": {
              "description": "Sort by impacted files, descending",
              "go_name": "BranchImpactedFileCountDesc"
            },
            "-policy_status": {
              "description": "Sort by policy status in descending order",
              "go_name": "BranchPolicyStatusDesc"
            },
            "-scan_date": {
              "description": "Sort by creation date in descending order",
              "go_name": "BranchScanDateDesc"
            },
            "-severity": {
              "description": "Sort by severity in descending order",
              "go_name": "BranchSeverityIssuesDesc"
            },
            "branch": {
              "description": "Sort by branch name in ascending order",
              "go_name": "BranchNameAsc"
            },
            "impacted_file_count": {
              "description": "Sort by impacted files, ascending",
              "go_name": "BranchImpactedFileCountAsc"
            },
            "policy_status": {
              "description": "Sort by policy status in ascending order",
              "go_name": "BranchPolicyStatusAsc"
            },
            "scan_date": {
              "description": "Sort by creation date in ascending order",
              "go_name": "BranchScanDateAsc"
            },
            "severity": {
              "description": "Sort by severity in ascending order",
              "go_name": "BranchSeverityIssuesAsc"
            }
          }
        }
      },
      "ListBuildSecurityPoliciesExport": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/BuildSecurityPolicy"
            },
            "type": "array"
          },
          "replace": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ListBuildSecurityPoliciesOrderBy": {
        "enum": [
          "name",
          "-name",
          "created",
          "-created",
          "updated",
          "-updated",
          "enforce",
          "-enforce",
          "description",
          "-description",
          "created_by",
          "-created_by",
          "enforce_date",
          "-enforce_date",
          "enable",
          "-enable",
          "updated_by",
          "-updated_by",
          "policy_type",
          "-policy_type",
          "scope",
          "-scope"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-created": {
              "description": "Sort by creation date in descending order",
              "go_name": "OrderPoliciesByCreatedDesc"
            },
            "-created_by": {
              "description": "Sort by created_by in descending order",
              "go_name": "OrderPoliciesByCreatedByDesc"
            },
            "-description": {
              "description": "Sort by description in descending order",
              "go_name": "OrderPoliciesByDescriptionDesc"
            },
            "-enable": {
              "description": "Sort by enable in descending order",
              "go_name": "OrderPoliciesByEnableDesc"
            },
            "-enforce": {
              "description": "Sort by enforce in descending order",
              "go_name": "OrderPoliciesByModeDesc"
            },
            "-enforce_date": {
              "description": "Sort by enforce_date in descending order",
              "go_name": "OrderPoliciesByEnforceDateDesc"
            },
            "-name": {
              "description": "Sort by name in descending order",
              "go_name": "OrderPoliciesByNameDesc"
            },
            "-policy_type": {
              "description": "Sort by policy_type in descending order",
              "go_name": "OrderPoliciesByPolicyTypeDesc"
            },
            "-scope": {
              "description": "Sort by scope in descending order",
              "go_name": "OrderPoliciesByScopeDesc"
            },
            "-updated": {
              "description": "Sort by last updated date in descending order",
              "go_name": "OrderPoliciesByUpdatedDesc"
            },
            "-updated_by": {
              "description": "Sort by updated_by in descending order",
              "go_name": "OrderPoliciesByUpdatedByDesc"
            },
            "created": {
              "description": "Sort by creation date in ascending order",
              "go_name": "OrderPoliciesByCreatedAsc"
            },
            "created_by": {
              "description": "Sort by created_by in ascending order",
              "go_name": "OrderPoliciesByCreatedByAsc"
            },
            "description": {
              "description": "Sort by description in ascending order",
              "go_name": "OrderPoliciesByDescriptionAsc"
            },
            "enable": {
              "description": "Sort by enable in ascending order",
              "go_name": "OrderPoliciesByEnableAsc"
            },
            "enforce": {
              "description": "Sort by enforce in ascending order",
              "go_name": "OrderPoliciesByModeAsc"
            },
            "enforce_date": {
              "description": "Sort by enforce_date in ascending order",
              "go_name": "OrderPoliciesByEnforceDateAsc"
            },
            "name": {
              "description": "Sort by name in ascending order",
              "go_name": "OrderPoliciesByNameAsc"
            },
            "policy_type": {
              "description": "Sort by policy_type in ascending order",
              "go_name": "OrderPoliciesByPolicyTypeAsc"
            },
            "scope": {
              "description": "Sort by scope in ascending order",
              "go_name": "OrderPoliciesByScopeAsc"
            },
            "updated": {
              "description": "Sort by last updated date in ascending order",
              "go_name": "OrderPoliciesByUpdatedAsc"
            },
            "updated_by": {
              "description": "Sort by updated_by in ascending order",
              "go_name": "OrderPoliciesByUpdatedByAsc"
            }
          }
        }
      },
      "ListBuildSecurityPoliciesResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/BuildSecurityPolicy"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListDependencyRepositoriesResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DependencyRepository"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ListDetectionInstancesResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DetectionInstance"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListDetectionsResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Detection"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListOssHealthResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OssHealth"
            },
            "type": "array"
          },
          "total": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListRepositoriesOrderBy": {
        "enum": [
          "name",
          "scan_date",
          "severity_critical",
          "severity_high",
          "severity_medium",
          "severity_low",
          "severity_unknown",
          "impacted_file_count",
          "-impacted_file_count",
          "system",
          "-system",
          "severity",
          "-severity",
          "policy_status",
          "-policy_status",
          "last_push",
          "-last_push",
          "is_private",
          "-is_private",
          "triggered_by",
          "-triggered_by",
          "is_offline",
          "-is_offline",
          "source",
          "-source",
          "repository_status",
          "-repository_status"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-impacted_file_count": {
              "description": "Sort by impacted files, descending",
              "go_name": "ImpactedFileCountDesc"
            },
            "-is_offline": {
              "description": "Sort by is offline in descending order",
              "go_name": "IsOfflineDesc"
            },
            "-is_private": {
              "description": "Sort by is private in descending order",
              "go_name": "IsPrivateDesc"
            },
            "-last_push": {
              "description": "Sort by last push in descending order",
              "go_name": "LastPushDesc"
            },
            "-low_severity_low": {
              "description": "Sort by low severity in descending order",
              "go_name": "LowSeverityIssuesDesc"
            },
            "-name": {
              "description": "Sort by name in descending order",
              "go_name": "NameDesc"
            },
            "-policy_status": {
              "description": "Sort by policy status in descending order",
              "go_name": "PolicyStatusDesc"
            },
            "-repository_status": {
              "description": "Sort by repository_status (scanning in process, scan ran already or no scan is running or ran) in descending order",
              "go_name": "RepositoryStatusDesc"
            },
            "-scan_date": {
              "description": "Sort by creation date in descending order",
              "go_name": "RepositoryScanDateDesc"
            },
            "-severity": {
              "description": "Sort by severity in descending order",
              "go_name": "SeverityIssuesDesc"
            },
            "-severity_critical": {
              "description": "Sort by critical severity in descending order",
              "go_name": "CriticalSeverityIssuesDesc"
            },
            "-severity_high": {
              "description": "Sort by critical high in descending order",
              "go_name": "HighSeverityIssuesDesc"
            },
            "-severity_medium": {
              "description": "Sort by medium severity in descending order",
              "go_name": "MediumSeverityIssuesDesc"
            },
            "-severity_unknown": {
              "description": "Sort by unknown severity in descending order",
              "go_name": "UnknownSeverityIssuesDesc"
            },
            "-source": {
              "description": "Sort by source in descending order",
              "go_name": "SourceDesc"
            },
            "-system": {
              "description": "Sort by the build system, descending",
              "go_name": "SystemDesc"
            },
            "-triggered_by": {
              "description": "Sort by triggered by in descending order",
              "go_name": "TriggeredByDesc"
            },
            "impacted_file_count": {
              "description": "Sort by impacted files, ascending",
              "go_name": "ImpactedFileCountAsc"
            },
            "is_offline": {
              "description": "Sort by is offline in ascending order",
              "go_name": "IsOfflineAsc"
            },
            "is_private": {
              "description": "Sort by is private in ascending order",
              "go_name": "IsPrivateAsc"
            },
            "last_push": {
              "description": "Sort by last push in ascending order",
              "go_name": "LastPushAsc"
            },
            "low_severity_low": {
              "description": "Sort by low severity in ascending order",
              "go_name": "LowSeverityIssuesAsc"
            },
            "name": {
              "description": "Sort by name in ascending order",
              "go_name": "NameAsc"
            },
            "policy_status": {
              "description": "Sort by policy status in ascending order",
              "go_name": "PolicyStatusAsc"
            },
            "repository_status": {
              "description": "Sort by repository_status (scanning in process, scan ran already or no scan is running or ran) in ascending order",
              "go_name": "RepositoryStatusAsc"
            },
            "scan_date": {
              "description": "Sort by creation date in ascending order",
              "go_name": "RepositoryScanDateAsc"
            },
            "severity": {
              "description": "Sort by severity in ascending order",
              "go_name": "SeverityIssuesAsc"
            },
            "severity_critical": {
              "description": "Sort by critical severity in ascending order",
              "go_name": "CriticalSeverityIssuesAsc"
            },
            "severity_high": {
              "description": "Sort by critical high in ascending order",
              "go_name": "HighSeverityIssuesAsc"
            },
            "severity_medium": {
              "description": "Sort by medium severity in ascending order",
              "go_name": "MediumSeverityIssuesAsc"
            },
            "severity_unknown": {
              "description": "Sort by unknown severity in ascending order",
              "go_name": "UnknownSeverityIssuesAsc"
            },
            "source": {
              "description": "Sort by source in ascending order",
              "go_name": "SourceAsc"
            },
            "system": {
              "description": "Sort by the build system, ascending",
              "go_name": "SystemAsc"
            },
            "triggered_by": {
              "description": "Sort by triggered by in ascending order",
              "go_name": "TriggeredByAsc"
            }
          }
        }
      },
      "ListRepositoriesResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Repository"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          },
          "total_failed": {
            "description": "The total number of repositories which fail one or more policies across all pages",
            "format": "int64",
            "type": "integer"
          },
          "total_passed": {
            "description": "The total number of repositories which pass all policies across all pages",
            "format": "int64",
            "type": "integer"
          },
          "total_repositories": {
            "description": "The total number of repositories",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_critical": {
            "description": "The total number of repositories which have one or more critical results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_high": {
            "description": "The total number of repositories which have one or more high results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_low": {
            "description": "The total number of repositories which have one or more low results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_medium": {
            "description": "The total number of repositories which have one or more medium results",
            "format": "int64",
            "type": "integer"
          },
          "total_severity_unknown": {
            "description": "The total number of repositories which have one or more unknown results",
            "format": "int64",
            "type": "integer"
          },
          "total_warned": {
            "description": "The total number of repositories which cause one or more warnings (but no failures) on one or more policies across all pages",
            "format": "int64",
            "type": "integer"
          },
          "trial_end": {
            "description": "If the repositories trial limit has been exceeded",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListRepositoryScansResponse": {
        "properties": {
          "current_page": {
            "description": "The current page number (starting from 1)",
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Scan"
            },
            "type": "array"
          },
          "next_page": {
            "description": "The next page number (or zero if not relevant)",
            "format": "int64",
            "type": "integer"
          },
          "returned_count": {
            "description": "The number of records returned on the current page",
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of records across all pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListVersionsResponse": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/OssHealth"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NewBuildSecurityPolicy": {
        "properties": {
          "controls": {
            "items": {
              "$ref": "#/components/schemas/BuildSecurityPolicyControl"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "enforce": {
            "type": "boolean"
          },
          "enforcement_schedule": {
            "format": "date",
            "type": "string"
          },
          "fail_build": {
            "type": "boolean"
          },
          "fail_pr": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/BuildSecurityPolicyScope"
          },
          "type": {
            "$ref": "#/components/schemas/PolicyTypeEnum"
          }
        },
        "required": [
          "name",
          "description",
          "enable",
          "enforce",
          "fail_build",
          "fail_pr",
          "controls",
          "scope"
        ],
        "type": "object"
      },
      "OssHealth": {
        "properties": {
          "author": {
            "description": "A dependency author",
            "type": "string"
          },
          "dependency_id": {
            "description": "A dependency id (name and version)",
            "type": "string"
          },
          "deprecated": {
            "description": "Is the dependency deprecated",
            "type": "boolean"
          },
          "license": {
            "description": "The dependency licenses",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The dependency name",
            "type": "string"
          },
          "publish_date": {
            "description": "The dependency publish date",
            "format": "date-time",
            "type": "string"
          },
          "repository_amount": {
            "description": "The amount of repository using this dependency",
            "format": "int32",
            "type": "integer"
          },
          "repository_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_results": {
            "items": {
              "$ref": "#/components/schemas/RulesInfo"
            },
            "type": "object"
          },
          "source": {
            "description": "A dependency type",
            "type": "string"
          },
          "version": {
            "description": "The dependency version\"",
            "type": "string"
          },
          "weekly_downloads": {
            "description": "A dependency weekly downloads",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OssHealthOrderBy": {
        "enum": [
          "repository_amount",
          "-repository_amount",
          "dependency_id",
          "-dependency_id"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-dependency_id": {
              "description": "Sort by name in descending order",
              "go_name": "DependencyDependencyIDDesc"
            },
            "-repository_amount": {
              "description": "Sort by repository_amount in descending order",
              "go_name": "RepositoryAmountDesc"
            },
            "dependency_id": {
              "description": "Sort by name in ascending order",
              "go_name": "DependencyDependencyIDAsc"
            },
            "repository_amount": {
              "description": "Sort by repository_amount in descending order",
              "go_name": "RepositoryAmountAsc"
            }
          }
        }
      },
      "PackageScanningStatus": {
        "enum": [
          "passed",
          "unknown",
          "failed"
        ],
        "type": "string"
      },
      "PinnedBranches": {
        "properties": {
          "branch_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "branch_names"
        ],
        "type": "object"
      },
      "PolicyTypeEnum": {
        "enum": [
          "policy",
          "suppression"
        ],
        "type": "string"
      },
      "RegistryType": {
        "enum": [
          "docker_hub",
          "ecr",
          "acr",
          "gcr",
          "artifactory",
          "docker_v2",
          "harbor"
        ],
        "type": "string"
      },
      "Repository": {
        "properties": {
          "default_branch": {
            "description": "The default branch for the repository",
            "type": "string"
          },
          "existing_scan": {
            "type": "string"
          },
          "full_name": {
            "description": "The repository full name including the path",
            "type": "string"
          },
          "integration_id": {
            "type": "string"
          },
          "is_offline": {
            "type": "boolean"
          },
          "is_private": {
            "type": "boolean"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_push": {
            "format": "date",
            "type": "string"
          },
          "last_scan": {
            "$ref": "#/components/schemas/ScanDetail"
          },
          "metadata": {
            "$ref": "#/components/schemas/RepositoryMetaData",
            "description": "The repository metadata"
          },
          "name": {
            "description": "A display name of the repository",
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "pinned_branches": {
            "$ref": "#/components/schemas/PinnedBranches"
          },
          "repository_id": {
            "description": "A unique repository identifier",
            "format": "uuid",
            "type": "string"
          },
          "scm_id": {
            "description": "The scm ID",
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "technical_id": {
            "type": "string"
          }
        },
        "required": [
          "repository_id",
          "name"
        ],
        "type": "object"
      },
      "RepositoryDetail": {
        "properties": {
          "default_branch": {
            "description": "The default branch for the repository",
            "type": "string"
          },
          "name": {
            "description": "A display name of the repository",
            "type": "string"
          },
          "repository_id": {
            "description": "A unique repository identifier",
            "format": "uuid",
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          }
        },
        "required": [
          "repository_id",
          "name",
          "tags"
        ],
        "type": "object"
      },
      "RepositoryMetaData": {
        "properties": {
          "integration_id": {
            "type": "string"
          },
          "is_offline": {
            "type": "boolean"
          },
          "is_private": {
            "type": "boolean"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_push": {
            "format": "date-time",
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "technical_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Result": {
        "properties": {
          "avd_id": {
            "type": "string"
          },
          "data_source": {
            "type": "string"
          },
          "extra_data": {
            "description": "Extra data associated with the result. This is a free-form\nJSON object that can contain any data.\n",
            "type": "object"
          },
          "fixed_version": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "installed_version": {
            "type": "string"
          },
          "last_modified": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "pkg_name": {
            "type": "string"
          },
          "published_date": {
            "format": "date-time",
            "type": "string"
          },
          "repository_id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "result_type": {
            "$ref": "#/components/schemas/ResultType"
          },
          "scan_date": {
            "format": "date-time",
            "type": "string"
          },
          "scan_id": {
            "format": "uuid",
            "type": "string"
          },
          "scm_file": {
            "type": "string"
          },
          "scm_lines": {
            "type": "string"
          },
          "scm_link": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/SecurityIssueSeverity"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "target_end_line": {
            "format": "int32",
            "type": "integer"
          },
          "target_file": {
            "type": "string"
          },
          "target_start_line": {
            "format": "int32",
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "vendor_scoring": {
            "description": "The vulnerability's score information provided by the\nrespective vendor (e.g. Red Hat).\n",
            "items": {
              "$ref": "#/components/schemas/VulnerabilityScoring"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "scan_id",
          "scan_date",
          "repository_id",
          "result_type",
          "title",
          "message",
          "resource",
          "target_file",
          "target_start_line",
          "target_end_line",
          "avd_id",
          "severity",
          "tags"
        ],
        "type": "object"
      },
      "ResultDataOrderBy": {
        "enum": [
          "scan_id",
          "message",
          "resource",
          "target",
          "severity",
          "avd_id",
          "-scan_id",
          "-message",
          "-resource",
          "-target",
          "-severity",
          "-avd_id",
          "title",
          "-title"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-avd_id": {
              "description": "Sort by policy id in descending order",
              "go_name": "AvidIDDesc"
            },
            "-data_source": {
              "description": "Sort by data source in descending order",
              "go_name": "DataSourceDesc"
            },
            "-fixed_version": {
              "description": "Sort by fixed version in descending order",
              "go_name": "FixedVersionDesc"
            },
            "-installed_version": {
              "description": "Sort by installed version in descending order",
              "go_name": "InstalledVersionDesc"
            },
            "-message": {
              "description": "Sort by message in descending order",
              "go_name": "MessageDesc"
            },
            "-pkg_name": {
              "description": "Sort by package name in descending order",
              "go_name": "PkgNameDesc"
            },
            "-resource": {
              "description": "Sort by resource in descending order",
              "go_name": "ResourceDesc"
            },
            "-severity": {
              "description": "Sort by severity in descending order",
              "go_name": "SeverityDesc"
            },
            "-target": {
              "description": "Sort by target in descending order",
              "go_name": "TargetDesc"
            },
            "-title": {
              "description": "Sort by title in descending order",
              "go_name": "TitleDesc"
            },
            "avd_id": {
              "description": "Sort by policy id in ascending order",
              "go_name": "AvdIDAsc"
            },
            "data_source": {
              "description": "Sort by data source in ascending order",
              "go_name": "DataSourceAsc"
            },
            "fixed_version": {
              "description": "Sort by fixed version in ascending order",
              "go_name": "FixedVersionAsc"
            },
            "installed_version": {
              "description": "Sort by installed version in ascending order",
              "go_name": "InstalledVersionAsc"
            },
            "message": {
              "description": "Sort by message in ascending order",
              "go_name": "MessageAsc"
            },
            "pkg_name": {
              "description": "Sort by package name in ascending order",
              "go_name": "PkgNameAsc"
            },
            "resource": {
              "description": "Sort by resource in ascending order",
              "go_name": "ResourceAsc"
            },
            "severity": {
              "description": "Sort by severity in ascending order",
              "go_name": "SeverityAsc"
            },
            "target": {
              "description": "Sort by target in ascending order",
              "go_name": "TargetAsc"
            },
            "title": {
              "description": "Sort by title in ascending order",
              "go_name": "TitleAsc"
            }
          }
        }
      },
      "ResultType": {
        "enum": [
          "unknown",
          "dockerfile",
          "cloudformation",
          "terraform",
          "kubernetes",
          "yaml",
          "hcl",
          "vulnerabilities",
          "secrets",
          "helm",
          "pipeline",
          "sast",
          "azure_arm"
        ],
        "type": "string"
      },
      "RulesInfo": {
        "properties": {
          "severity": {
            "type": "string"
          },
          "status": {
            "items": {
              "$ref": "#/components/schemas/PackageScanningStatus"
            },
            "type": "string"
          }
        },
        "type": "object"
      },
      "SastCheckMetadata": {
        "properties": {
          "id": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SastChecksMetadataResponse": {
        "properties": {
          "data": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/SastCheckMetadata"
              },
              "type": "array"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Scan": {
        "properties": {
          "critical_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "high_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "impacted_file_count": {
            "format": "int32",
            "type": "integer"
          },
          "low_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "medium_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "misconfigurations_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "pipeline_misconfigurations_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "policy_failure_count": {
            "format": "int32",
            "type": "integer"
          },
          "policy_pass_count": {
            "format": "int32",
            "type": "integer"
          },
          "policy_warning_count": {
            "format": "int32",
            "type": "integer"
          },
          "repository": {
            "$ref": "#/components/schemas/RepositoryDetail"
          },
          "sast_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "scan_date": {
            "format": "date-time",
            "type": "string"
          },
          "scan_id": {
            "description": "The ID of the most recent scan for this repository.",
            "format": "uuid",
            "type": "string"
          },
          "scm_link": {
            "type": "string"
          },
          "secrets_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "triggered_by": {
            "$ref": "#/components/schemas/TriggeredByEnum"
          },
          "unknown_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "vulnerabilities_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          }
        },
        "required": [
          "repository",
          "scan_id",
          "scan_date",
          "critical_severity_count",
          "high_severity_count",
          "medium_severity_count",
          "low_severity_count",
          "unknown_severity_count",
          "impacted_file_count",
          "policy_pass_count",
          "policy_failure_count",
          "policy_warning_count",
          "tags",
          "triggered_by"
        ],
        "type": "object"
      },
      "ScanDataOrderBy": {
        "enum": [
          "scan_date",
          "-scan_date"
        ],
        "type": "string",
        "x-aqua-enum": {
          "options": {
            "-scan_date": {
              "description": "Sort by date in ascending order",
              "go_name": "ScanDateAsc"
            },
            "scan_date": {
              "description": "Sort by date in descending order",
              "go_name": "ScanDateDesc"
            }
          }
        }
      },
      "ScanDetail": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "build_id": {
            "type": "string"
          },
          "build_system": {
            "type": "string"
          },
          "commit_id": {
            "type": "string"
          },
          "critical_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "git_user": {
            "type": "string"
          },
          "high_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "impacted_file_count": {
            "format": "int32",
            "type": "integer"
          },
          "low_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "medium_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "misconfigurations_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "pipeline_misconfigurations_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "policy_failure_count": {
            "format": "int32",
            "type": "integer"
          },
          "policy_pass_count": {
            "format": "int32",
            "type": "integer"
          },
          "policy_warning_count": {
            "format": "int32",
            "type": "integer"
          },
          "run": {
            "type": "string"
          },
          "sast_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "scan_date": {
            "format": "date-time",
            "type": "string"
          },
          "scan_id": {
            "description": "The ID of the most recent scan for this repository.",
            "format": "uuid",
            "type": "string"
          },
          "scm_link": {
            "type": "string"
          },
          "secrets_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "triggered_by": {
            "$ref": "#/components/schemas/TriggeredByEnum"
          },
          "unknown_severity_count": {
            "format": "int32",
            "type": "integer"
          },
          "vulnerabilities_severity_count": {
            "$ref": "#/components/schemas/SeverityCounts"
          }
        },
        "required": [
          "scan_id",
          "scan_date",
          "critical_severity_count",
          "high_severity_count",
          "medium_severity_count",
          "low_severity_count",
          "unknown_severity_count",
          "impacted_file_count",
          "tags",
          "branch",
          "git_user",
          "commit_id",
          "build_system",
          "policy_pass_count",
          "policy_failure_count",
          "policy_warning_count",
          "triggered_by"
        ],
        "type": "object"
      },
      "ScanDetails": {
        "properties": {
          "impacted_files": {
            "format": "int32",
            "type": "integer"
          },
          "scan_date": {
            "format": "date-time",
            "type": "string"
          },
          "scan_id": {
            "type": "string"
          },
          "severity_summary": {
            "$ref": "#/components/schemas/SeveritySummary"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          }
        },
        "required": [
          "scan_id",
          "scan_date",
          "severity_summary",
          "tags",
          "impacted_files"
        ],
        "type": "object"
      },
      "ScanType": {
        "enum": [
          "misconfiguration",
          "vulnerability",
          "secret",
          "pipeline",
          "sast",
          "dependency",
          "profile",
          "manifest"
        ],
        "type": "string"
      },
      "ScopeEnum": {
        "enum": [
          "all",
          "repository"
        ],
        "type": "string"
      },
      "SecretCheckMetadata": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretsChecksMetadataResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SecretCheckMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecurityIssuePolicyStatus": {
        "enum": [
          "passed",
          "warning",
          "failed"
        ],
        "type": "string"
      },
      "SecurityIssueSeverity": {
        "enum": [
          "critical",
          "high",
          "medium",
          "low",
          "unknown"
        ],
        "type": "string"
      },
      "SeverityCounts": {
        "properties": {
          "critical_severity_count": {
            "format": "int",
            "type": "integer"
          },
          "high_severity_count": {
            "format": "int",
            "type": "integer"
          },
          "low_severity_count": {
            "format": "int",
            "type": "integer"
          },
          "medium_severity_count": {
            "format": "int",
            "type": "integer"
          },
          "unknown_severity_count": {
            "format": "int",
            "type": "integer"
          }
        },
        "required": [
          "critical_severity_count",
          "high_severity_count",
          "medium_severity_count",
          "low_severity_count",
          "unknown_severity_count"
        ],
        "type": "object"
      },
      "SeveritySummary": {
        "properties": {
          "critical_severity_issues": {
            "format": "int32",
            "type": "integer"
          },
          "high_severity_issues": {
            "format": "int32",
            "type": "integer"
          },
          "low_severity_issues": {
            "format": "int32",
            "type": "integer"
          },
          "medium_severity_issues": {
            "format": "int32",
            "type": "integer"
          },
          "unknown_severity_issues": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "critical_severity_issues",
          "high_severity_issues",
          "medium_severity_issues",
          "low_severity_issues",
          "unknown_severity_issues"
        ],
        "type": "object"
      },
      "SeverityTypes": {
        "enum": [
          "misconfiguration",
          "vulnerabilities",
          "secrets",
          "pipeline",
          "sast",
          "network_call",
          "fs_change",
          "container"
        ],
        "type": "string"
      },
      "StatusEnum": {
        "enum": [
          "enabled",
          "disabled"
        ],
        "type": "string"
      },
      "Tag": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "TraceeCheckMetadata": {
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TraceeChecksMetadataResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TraceeCheckMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TriggeredByEnum": {
        "enum": [
          "unknown",
          "push",
          "pr",
          "offline"
        ],
        "type": "string"
      },
      "UpdateBuildSecurityPolicy": {
        "properties": {
          "clear_schedule": {
            "default": false,
            "type": "boolean"
          },
          "controls": {
            "items": {
              "$ref": "#/components/schemas/BuildSecurityPolicyControl"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "enforce": {
            "type": "boolean"
          },
          "enforcement_schedule": {
            "format": "date",
            "type": "string"
          },
          "fail_build": {
            "type": "boolean"
          },
          "fail_pr": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/BuildSecurityPolicyScope"
          },
          "type": {
            "$ref": "#/components/schemas/PolicyTypeEnum"
          }
        },
        "required": [
          "name",
          "description",
          "enable",
          "enforce",
          "fail_build",
          "fail_pr",
          "controls",
          "scope"
        ],
        "type": "object"
      },
      "UpdateRepository": {
        "properties": {
          "default_branch": {
            "type": "string"
          },
          "full_name": {
            "description": "The full name of the repository",
            "type": "string"
          },
          "is_offline": {
            "type": "boolean"
          },
          "is_private": {
            "type": "boolean"
          },
          "last_push": {
            "format": "date-time",
            "type": "string"
          },
          "source": {
            "description": "The repository creation source",
            "type": "string"
          },
          "technical_id": {
            "description": "The source technical id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityScoring": {
        "properties": {
          "cvss2_score": {
            "description": "The vulnerability's CVSS v2 score",
            "format": "float",
            "maximum": 10,
            "minimum": 0,
            "type": "number"
          },
          "cvss2_vector": {
            "description": "The vulnerability's CVSS v2 vector",
            "type": "string"
          },
          "cvss3_score": {
            "description": "The vulnerability's CVSS v3 score",
            "format": "float",
            "maximum": 10,
            "minimum": 0,
            "type": "number"
          },
          "cvss3_vector": {
            "description": "The vulnerability's CVSS v3 vector",
            "type": "string"
          },
          "severity": {
            "description": "The sources severity",
            "format": "int64",
            "type": "integer"
          },
          "source_name": {
            "description": "The source of the vulnerability scoring.",
            "example": "NVD",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "userToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "x-source": "Token received when signing in through POST <API_URL>/signin"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.aquasec.com/v2/"
    }
  ]
}
